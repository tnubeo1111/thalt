from flask import Flask, request, jsonify
import json
import os
import logging
from kubernetes import client
from kubernetes.client.rest import ApiException
from tenacity import retry, stop_after_attempt, wait_fixed

app = Flask(__name__)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

PRIMARY_CLUSTER_API = os.getenv("PRIMARY_CLUSTER_API")
PRIMARY_CLUSTER_TOKEN = os.getenv("PRIMARY_CLUSTER_TOKEN")

if not PRIMARY_CLUSTER_API or not PRIMARY_CLUSTER_TOKEN:
    raise Exception("PRIMARY_CLUSTER_API and PRIMARY_CLUSTER_TOKEN must be set")

configuration = client.Configuration()
configuration.host = PRIMARY_CLUSTER_API
configuration.api_key['authorization'] = f"Bearer {PRIMARY_CLUSTER_TOKEN}"
configuration.verify_ssl = False  # Set to True in production with proper CA
primary_client = client.ApiClient(configuration)
core_v1 = client.CoreV1Api(primary_client)
custom_objects_api = client.CustomObjectsApi(primary_client)

# Map resource kinds to their group, version, and plural
ISTIO_RESOURCES = {
    "WasmPlugin": {"group": "extensions.istio.io", "version": "v1alpha1", "plural": "wasmplugins"},
    "DestinationRule": {"group": "networking.istio.io", "version": "v1", "plural": "destinationrules"},
    "EnvoyFilter": {"group": "networking.istio.io", "version": "v1alpha3", "plural": "envoyfilters"},
    "Gateway": {"group": "networking.istio.io", "version": "v1", "plural": "gateways"},
    "ProxyConfig": {"group": "networking.istio.io", "version": "v1beta1", "plural": "proxyconfigs"},
    "ServiceEntry": {"group": "networking.istio.io", "version": "v1", "plural": "serviceentries"},
    "Sidecar": {"group": "networking.istio.io", "version": "v1", "plural": "sidecars"},
    "VirtualService": {"group": "networking.istio.io", "version": "v1", "plural": "virtualservices"},
    "WorkloadEntry": {"group": "networking.istio.io", "version": "v1", "plural": "workloadentries"},
    "WorkloadGroup": {"group": "networking.istio.io", "version": "v1", "plural": "workloadgroups"},
    "AuthorizationPolicy": {"group": "security.istio.io", "version": "v1", "plural": "authorizationpolicies"},
    "PeerAuthentication": {"group": "security.istio.io", "version": "v1", "plural": "peerauthentications"},
    "RequestAuthentication": {"group": "security.istio.io", "version": "v1", "plural": "requestauthentications"},
    "Telemetry": {"group": "telemetry.istio.io", "version": "v1", "plural": "telemetries"}
}

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
def create_namespace(namespace):
    core_v1.create_namespace(body=namespace)

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
def update_namespace(namespace_name, namespace):
    core_v1.replace_namespace(name=namespace_name, body=namespace)

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
def create_custom_object(group, version, namespace, plural, body):
    custom_objects_api.create_namespaced_custom_object(
        group=group,
        version=version,
        namespace=namespace,
        plural=plural,
        body=body
    )

@app.route("/mutate", methods=["POST"])
def mutate():
    logger.info("Received webhook request")
    admission_review = request.get_json()
    if not admission_review or 'request' not in admission_review:
        logger.error("Invalid AdmissionReview")
        return jsonify({"error": "Invalid AdmissionReview"}), 400

    request_data = admission_review['request']
    uid = request_data['uid']
    kind = request_data['kind']['kind']
    namespace = request_data.get('namespace', '')
    object_data = request_data['object']
    operation = request_data['operation']

    try:
        # Handle Namespace (CREATE or UPDATE, including labels like istio-injection)
        if kind == "Namespace":
            ns_name = object_data['metadata']['name']
            logger.info(f"Processing Namespace {operation}: {ns_name}")
            try:
                if operation == "CREATE":
                    create_namespace({
                        "apiVersion": "v1",
                        "kind": "Namespace",
                        "metadata": {
                            "name": ns_name,
                            "labels": object_data['metadata'].get('labels', {})
                        }
                    })
                    logger.info(f"Created Namespace {ns_name} on primary cluster")
                elif operation == "UPDATE":
                    update_namespace(ns_name, {
                        "apiVersion": "v1",
                        "kind": "Namespace",
                        "metadata": {
                            "name": ns_name,
                            "labels": object_data['metadata'].get('labels', {})
                        }
                    })
                    logger.info(f"Updated Namespace {ns_name} on primary cluster")
            except ApiException as e:
                if e.status != 409:  # Ignore if namespace already exists
                    logger.error(f"Failed to process namespace: {str(e)}")
                    return jsonify({"error": f"Failed to process namespace: {str(e)}"}), 500

        # Handle Istio Resources
        elif kind in ISTIO_RESOURCES:
            resource_info = ISTIO_RESOURCES[kind]
            logger.info(f"Processing {kind} in namespace: {namespace}")
            try:
                create_custom_object(
                    group=resource_info["group"],
                    version=resource_info["version"],
                    namespace=namespace,
                    plural=resource_info["plural"],
                    body=object_data
                )
                logger.info(f"Created {kind} in namespace {namespace} on primary cluster")
            except ApiException as e:
                if e.status != 409:  # Ignore if resource already exists
                    logger.error(f"Failed to create {kind}: {str(e)}")
                    return jsonify({"error": f"Failed to create {kind}: {str(e)}"}), 500

        # Return AdmissionReview response
        response = {
            "apiVersion": "admission.k8s.io/v1",
            "kind": "AdmissionReview",
            "response": {
                "uid": uid,
                "allowed": True
            }
        }
        logger.info("Returning successful response")
        return jsonify(response)

    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return jsonify({"error": f"Webhook error: {str(e)}"}), 500

if __name__ == "__main__":
    logger.info("Starting webhook server on :8443")
    app.run(ssl_context=('/certs/tls.crt', '/certs/tls.key'), host="0.0.0.0", port=8443)