extraPorts:
   - port: 5140
     containerPort: 5140
     protocol: TCP
     name: tcp
     nodePort: 30514

extraVolumes:
  - name: kafka-ca-cert
    secret:
      secretName: kafka-ca-cert-secret

extraVolumeMounts:
  - name: kafka-ca-cert
    mountPath: /etc/ssl/certs/kafka/ca.crt
    subPath: ca.crt
    readOnly: true

luaScripts:
  add_organization_id_ingress.lua: |
    function add_organization_id_from_requestUrl(tag, timestamp, record)
      local requestUrl = record["requestUrl"]

      if requestUrl then
          local organization_id = string.match(requestUrl, "/v2/([^%-/]+)")

            if organization_id then
              record["organization_id"] = organization_id
            else
              record["organization_id"] = "unknown"
          end
      else
          record["organization_id"] = "unknown"
      end

      return 1, timestamp, record
    end

  add_organization_id_audit.lua: |
    function add_organization_id(tag, timestamp, record)
        local logline = record["log"]
        local organization_id = "unknown"

        if logline then
            local resource = string.match(logline, 'resource:([^,]+)')
            if resource then
                record["resource"] = resource 
                local org = string.match(resource, "([^%-/]+)")
                if org then
                    organization_id = org
                end
            end
        end
        record["organization_id"] = organization_id
        return 1, timestamp, record
    end
            
  add_projectid_syslog.lua: |
    function add_projectid(tag, timestamp, record)
      local project = "unknown"
      local resource = record["resource"]
      if not resource and record["log"] then
          resource = string.match(record["log"], "resource:%s*([^,]+)")
          if resource then
              -- lưu lại để các filter khác dùng/soi
              record["resource"] = resource
          end
      end
      if resource then
          resource = resource:gsub("^%s+", ""):gsub("%s+$", "")
          local p = resource:match("([^/]+)/")
          if p and p ~= "" then
              project = p
          else
              project = resource
          end
      end

      record["projectID"] = project
      return 1, timestamp, record
    end
  add_projectid.lua: |
    function add_projectid(tag, timestamp, record)

      local requestUrl = record["requestUrl"]

      if requestUrl then
          local project = string.match(requestUrl, "/v2/([^/]+)/")

          if project then
              record["projectID"] = project
          else
              record["projectID"] = "unknown"
          end
      else
          record["projectID"] = "unknown"
      end

      return 1, timestamp, record
    end
config:
  service: |
    [SERVICE]
        Daemon Off
        Flush {{ .Values.flush }}
        Log_Level {{ .Values.logLevel }}
        Parsers_File /fluent-bit/etc/parsers.conf
        Parsers_File /fluent-bit/etc/conf/custom_parsers.conf
        HTTP_Server On
        HTTP_Listen 0.0.0.0
        HTTP_Port {{ .Values.metricsPort }}
        Health_Check On

  ## https://docs.fluentbit.io/manual/pipeline/inputs
  inputs: |
    [INPUT]
        Name tail
        Path /var/log/containers/*ingress-nginx*.log
        multiline.parser docker, cri
        Tag kube.ingress-nginx.*
        Parser json
        DB      /var/log/flb_kube.db
        Mem_Buf_Limit 50MB
        Skip_Long_Lines On
        Refresh_Interval 10
        Buffer_Chunk_Size 256k
        Buffer_Max_Size   10240k

    [INPUT]
        Name   syslog
        Tag    audit_log
        Port   5140
        Parser syslog-audit
        Mode   tcp

  ## https://docs.fluentbit.io/manual/pipeline/filters
  filters: |
    [FILTER]
        Name kubernetes
        Match kube.*
        Merge_Log On
        Keep_Log Off
        K8S-Logging.Parser On
        K8S-Logging.Exclude On

    [FILTER]
        Name              lua
        Match             kube.ingress-nginx.*
        Script            /fluent-bit/scripts/add_projectid.lua
        Call              add_projectid

    [FILTER]
        Name              modify
        Match             kube.ingress-nginx.*
        Remove            kubernetes

    [FILTER]
        Name              grep
        Match             kube.ingress-nginx.*
        Regex             host vcr-test.infiniband.vn

    [FILTER]
        Name              lua
        Match             kube.ingress-nginx.*
        Script            /fluent-bit/scripts/add_organization_id_ingress.lua
        Call              add_organization_id_from_requestUrl

    ##SYSLOG

    [FILTER]
        Name              parser
        Match             audit_log
        Key_Name          log
        Parser            audit-log
        Reserve_Data      True

    [FILTER]
        Name              lua
        Match             audit_log
        Script            /fluent-bit/scripts/add_projectid_syslog.lua
        Call              add_projectid

    [FILTER]
        Name              lua
        Match             audit_log
        Script            /fluent-bit/scripts/add_organization_id_audit.lua
        Call              add_organization_id



  ## https://docs.fluentbit.io/manual/pipeline/outputs
  outputs: |
    # [OUTPUT]
    #     Name kafka
    #     Match kube.ingress-nginx.*
    #     Brokers 172.26.9.19:9092
    #     Topics vcr-ingress
    #     Retry_Limit 3
    #     rdkafka.log.connection.close False
    #     Log_Level debug
    #     Format json_lines
    ##SYSLOG
    [OUTPUT]
        #Name  stdout
        #Match *
        Name kafka
        Match audit_log
        Brokers kafka-01.sbkafka.test.vn:31421, kafka-02.sbkafka.test.vn:30215, kakfa-03.sbkafka.test.vn:30412
        Topics kafka-vcr-log
        rdkafka.security.protocol  SASL_SSL
        rdkafka.sasl.mechanism     SCRAM-SHA-512
        rdkafka.sasl.username         kafka-vcr-log
        rdkafka.sasl.password         password
        rdkafka.ssl.ca.location       /etc/ssl/certs/kafka/ca.crt
        rdkafka.enable.ssl.certificate.verification false
        Retry_Limit 3
        rdkafka.log.connection.close False
        Log_Level debug
        Format json_lines
  customParsers: |
    [PARSER]
        Name docker_no_time
        Format json
        Time_Keep Off
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%L

    ##SYSLOG
    
    [PARSER]
        Name        syslog-audit
        Format      regex
        Regex       ^<(?<pri>[0-9]+)>(?<timestamp>[^\s]+) (?<host>[^\s]+) (?<app>[^\s]+)\[([^\]]+)\]: (?<log>[^\n]+)$
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S

    [PARSER]
        Name        audit-log
        Format      regex
        Regex       ^(?<timestamp>[^\s]+) \[(?<level>[A-Z]+)\] \[(?<file>[^:]+):(?<line>[0-9]+)\]\[operator=\"(?<operator>[^\"]+)\" resourceType=\"(?<resourceType>[^\"]+)\" time=\"(?<action_time>[^\"]+)\"]\: action\:(?<action>[^\s]+), resource\:(?<resource>[^,]+)$
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S  